// Code generated by mockery v2.10.0. DO NOT EDIT.

package mocks

import (
	gitlab "github.com/xanzy/go-gitlab"

	mock "github.com/stretchr/testify/mock"
)

// GitLabClient is an autogenerated mock type for the GitLabClient type
type GitLabClient struct {
	mock.Mock
}

type GitLabClient_Expecter struct {
	mock *mock.Mock
}

func (_m *GitLabClient) EXPECT() *GitLabClient_Expecter {
	return &GitLabClient_Expecter{mock: &_m.Mock}
}

// DeleteRegisteredRunnerByID provides a mock function with given fields: rid, options
func (_m *GitLabClient) DeleteRegisteredRunnerByID(rid int, options ...gitlab.RequestOptionFunc) (*gitlab.Response, error) {
	_va := make([]interface{}, len(options))
	for _i := range options {
		_va[_i] = options[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, rid)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *gitlab.Response
	if rf, ok := ret.Get(0).(func(int, ...gitlab.RequestOptionFunc) *gitlab.Response); ok {
		r0 = rf(rid, options...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gitlab.Response)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int, ...gitlab.RequestOptionFunc) error); ok {
		r1 = rf(rid, options...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GitLabClient_DeleteRegisteredRunnerByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteRegisteredRunnerByID'
type GitLabClient_DeleteRegisteredRunnerByID_Call struct {
	*mock.Call
}

// DeleteRegisteredRunnerByID is a helper method to define mock.On call
//  - rid int
//  - options ...gitlab.RequestOptionFunc
func (_e *GitLabClient_Expecter) DeleteRegisteredRunnerByID(rid interface{}, options ...interface{}) *GitLabClient_DeleteRegisteredRunnerByID_Call {
	return &GitLabClient_DeleteRegisteredRunnerByID_Call{Call: _e.mock.On("DeleteRegisteredRunnerByID",
		append([]interface{}{rid}, options...)...)}
}

func (_c *GitLabClient_DeleteRegisteredRunnerByID_Call) Run(run func(rid int, options ...gitlab.RequestOptionFunc)) *GitLabClient_DeleteRegisteredRunnerByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]gitlab.RequestOptionFunc, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(gitlab.RequestOptionFunc)
			}
		}
		run(args[0].(int), variadicArgs...)
	})
	return _c
}

func (_c *GitLabClient_DeleteRegisteredRunnerByID_Call) Return(_a0 *gitlab.Response, _a1 error) *GitLabClient_DeleteRegisteredRunnerByID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// GetRunnerDetails provides a mock function with given fields: rid, options
func (_m *GitLabClient) GetRunnerDetails(rid interface{}, options ...gitlab.RequestOptionFunc) (*gitlab.RunnerDetails, *gitlab.Response, error) {
	_va := make([]interface{}, len(options))
	for _i := range options {
		_va[_i] = options[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, rid)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *gitlab.RunnerDetails
	if rf, ok := ret.Get(0).(func(interface{}, ...gitlab.RequestOptionFunc) *gitlab.RunnerDetails); ok {
		r0 = rf(rid, options...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gitlab.RunnerDetails)
		}
	}

	var r1 *gitlab.Response
	if rf, ok := ret.Get(1).(func(interface{}, ...gitlab.RequestOptionFunc) *gitlab.Response); ok {
		r1 = rf(rid, options...)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*gitlab.Response)
		}
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(interface{}, ...gitlab.RequestOptionFunc) error); ok {
		r2 = rf(rid, options...)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GitLabClient_GetRunnerDetails_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetRunnerDetails'
type GitLabClient_GetRunnerDetails_Call struct {
	*mock.Call
}

// GetRunnerDetails is a helper method to define mock.On call
//  - rid interface{}
//  - options ...gitlab.RequestOptionFunc
func (_e *GitLabClient_Expecter) GetRunnerDetails(rid interface{}, options ...interface{}) *GitLabClient_GetRunnerDetails_Call {
	return &GitLabClient_GetRunnerDetails_Call{Call: _e.mock.On("GetRunnerDetails",
		append([]interface{}{rid}, options...)...)}
}

func (_c *GitLabClient_GetRunnerDetails_Call) Run(run func(rid interface{}, options ...gitlab.RequestOptionFunc)) *GitLabClient_GetRunnerDetails_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]gitlab.RequestOptionFunc, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(gitlab.RequestOptionFunc)
			}
		}
		run(args[0].(interface{}), variadicArgs...)
	})
	return _c
}

func (_c *GitLabClient_GetRunnerDetails_Call) Return(_a0 *gitlab.RunnerDetails, _a1 *gitlab.Response, _a2 error) *GitLabClient_GetRunnerDetails_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

// ListRunners provides a mock function with given fields: opt, options
func (_m *GitLabClient) ListRunners(opt *gitlab.ListRunnersOptions, options ...gitlab.RequestOptionFunc) ([]*gitlab.Runner, *gitlab.Response, error) {
	_va := make([]interface{}, len(options))
	for _i := range options {
		_va[_i] = options[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, opt)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 []*gitlab.Runner
	if rf, ok := ret.Get(0).(func(*gitlab.ListRunnersOptions, ...gitlab.RequestOptionFunc) []*gitlab.Runner); ok {
		r0 = rf(opt, options...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*gitlab.Runner)
		}
	}

	var r1 *gitlab.Response
	if rf, ok := ret.Get(1).(func(*gitlab.ListRunnersOptions, ...gitlab.RequestOptionFunc) *gitlab.Response); ok {
		r1 = rf(opt, options...)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*gitlab.Response)
		}
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(*gitlab.ListRunnersOptions, ...gitlab.RequestOptionFunc) error); ok {
		r2 = rf(opt, options...)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GitLabClient_ListRunners_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListRunners'
type GitLabClient_ListRunners_Call struct {
	*mock.Call
}

// ListRunners is a helper method to define mock.On call
//  - opt *gitlab.ListRunnersOptions
//  - options ...gitlab.RequestOptionFunc
func (_e *GitLabClient_Expecter) ListRunners(opt interface{}, options ...interface{}) *GitLabClient_ListRunners_Call {
	return &GitLabClient_ListRunners_Call{Call: _e.mock.On("ListRunners",
		append([]interface{}{opt}, options...)...)}
}

func (_c *GitLabClient_ListRunners_Call) Run(run func(opt *gitlab.ListRunnersOptions, options ...gitlab.RequestOptionFunc)) *GitLabClient_ListRunners_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]gitlab.RequestOptionFunc, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(gitlab.RequestOptionFunc)
			}
		}
		run(args[0].(*gitlab.ListRunnersOptions), variadicArgs...)
	})
	return _c
}

func (_c *GitLabClient_ListRunners_Call) Return(_a0 []*gitlab.Runner, _a1 *gitlab.Response, _a2 error) *GitLabClient_ListRunners_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}
